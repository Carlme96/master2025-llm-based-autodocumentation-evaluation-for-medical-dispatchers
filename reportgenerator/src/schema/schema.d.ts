/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/stuff/image-decoder-example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Autodoc */
        post: operations["autodoc_stuff_image_decoder_example_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stuff/generate-word-example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Word Document */
        post: operations["generate_word_document_stuff_generate_word_example_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parsebot/vacation-example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Vacation Example */
        post: operations["vacation_example_parsebot_vacation_example_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/aicos/aicos-example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Aicos Example */
        post: operations["aicos_example_aicos_aicos_example_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/report/report-generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report Generate */
        post: operations["report_generate_report_report_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/report/get_reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reports */
        get: operations["get_reports_report_get_reports_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/report/get_report/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Report */
        get: operations["get_report_report_get_report__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/report/get-example-prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Example Prompts */
        get: operations["get_example_prompts_report_get_example_prompts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Advice
         * @description Advice model for the EvaluateBot module.
         *     Populated by an LLM with the criterias and advice numbers from a chapter in the norwegian index.
         *
         *     Attributes:
         *             criterias (list[str]): List of criterias
         *             advices (set[int]): Set of advice numbers, corresponding to the criterias.
         */
        Advice: {
            /** Criterias */
            criterias: string[];
            /** Advices */
            advices: number[];
        };
        /** AutoDocOut */
        AutoDocOut: {
            /** Message */
            message: string;
            /** Images */
            images: string[];
        };
        /** BaseAICOSParseApiProps[list[str], str] */
        BaseAICOSParseApiProps_list_str__str_: {
            /** Transcripts */
            transcripts: string[];
            /** Incidence Time */
            incidence_time: string;
            /** Location */
            location: string;
        };
        /** BaseData */
        BaseData: {
            /** Appname */
            appname: string;
            /** Location */
            location: string;
            /** Time */
            time: string;
            /**
             * Images
             * @default []
             */
            images: string[];
            /** Transcription */
            transcription: string[];
        };
        /** Body_aicos_example_aicos_aicos_example_post */
        Body_aicos_example_aicos_aicos_example_post: {
            /** @default {
             *       "transcripts": [
             *         "0: 113 emergency,  you're speaking to a nurse Thomas, how may I help you?",
             *         "1, Please help us.",
             *         "1, My sister fell down from a ladder. She's unconscious.",
             *         "2, Ask for adress",
             *         "0, OK. Can you confirm your calling from Main Street 15?",
             *         "1, Yes, that's yes, we are in Main Street 15.",
             *         "2, Is she responsive or awake, and is she breathing?",
             *         "0, OK. Can you tell me if the person is conscious and breathing?",
             *         "1, She's breathing.",
             *         "1, But Hilda, Hilda, can you hear me?",
             *         "1, Hilda, please open your eyes, Hilda.",
             *         "1, She's moaning and she's trying to open her eyes, but I can't get anything out of her.",
             *         "2, Check if the breathing is normal",
             *         "0, OK, OK. Check if she's breathing normally or or if there are any signs of difficulty.",
             *         "1, She's breathing.",
             *         "1, There is air passing.",
             *         "1, I don't think she has any difficulty breathing.",
             *         "2, Support the head and keep it in a straight line with the body",
             *         "0, OK.",
             *         "0, Check her head and and keep her head stable and avoid moving her.",
             *         "1, OK, my my brother can help with doing that, but I'm really concerned she has.",
             *         "1, She's broken her leg.",
             *         "1, Can you see this?",
             *         "1, And it's bleeding really bad.",
             *         "0, Yeah, I can see it.",
             *         "1, Seems to be an open fracture.",
             *         "2, Stop the bleeding by putting pressure on the wound with a clean cloth until the bleeding stops",
             *         "0, You need  to apply pressure to the bleeding area with a clean cloth or bandage to stop the bleeding.",
             *         "1, OK.",
             *         "1, Just a minute. We'll do that.",
             *         "2, Elevate the injured leg ",
             *         "0, You should also elevate the injured leg to reduce bleeding if possible.",
             *         "1, OK, I have a clean cloth here and just apply it directly here where it's bleeding.",
             *         "1, And elevate the leg.",
             *         "1, Oh, this is painful for her.",
             *         "1, I'm sorry, Hilda.",
             *         "0, And.",
             *         "1, I think she's waking up a little bit now. Does this seem OK?",
             *         "1, OK.",
             *         "2, Make sure she does not eat or drink anything",
             *         "0, I think so. And sure the bleeding area is elevated as high as possible to help reduce blood loss.",
             *         "0, Don't give her anything to drink or eat.",
             *         "1, OK, we we won't do that.",
             *         "2, Keep her warm with a blanket (over and under?)",
             *         "0, OK. Can you also try to keep her warm with a blanket or coat?",
             *         "1, Yes, we'll do that.",
             *         "0, Endure she's lying on her side to prevent choking if she vomits.",
             *         "1, OK.",
             *         "1, I don't know if I can move her right now.",
             *         "1, With this broken leg.",
             *         "0, OK.",
             *         "0, And then.",
             *         "1, Hilda.",
             *         "0, OK.",
             *         "1, Yeah, she's. She's waking up a little bit now.",
             *         "0, OK.",
             *         "0, So she's breathing fine.",
             *         "1, It seems so, yeah.",
             *         "0, OK, good.",
             *         "0, Yeah. Monitor her breathing.  Alert if it becomes irregular or stops.",
             *         "1, OK, my brother is is holding her neck and he's observing her breathing also.",
             *         "0, OK. And make sure she's kept still and does not move toward further injury.",
             *         "1, OK.",
             *         "0, I think the ambulance should be on its way, should be, should be there soon.",
             *         "1, Oh, that's good.",
             *         "1, Oh, that's good to hear.",
             *         "1, Yeah.",
             *         "0, And can you make sure nobody smokes near the accident site?",
             *         "1, I was feeling like having a smoker just now, OK?",
             *         "1, I'll wait.",
             *         "1, Oh the sirens.",
             *         "1, Oh, luckily there's coming.",
             *         "1, Someone who can help us? Thank you.",
             *         "1, Thank you.",
             *         "1, Bye bye."
             *       ],
             *       "incidence_time": "01-02-2024",
             *       "location": "Eksempelveien 20, 4044 Hafrsfjord"
             *     } */
            data: components["schemas"]["BaseAICOSParseApiProps_list_str__str_"];
            /** Images */
            images?: string[] | null;
        };
        /** Body_autodoc_stuff_image_decoder_example_post */
        Body_autodoc_stuff_image_decoder_example_post: {
            /**
             * Images
             * @description Upload images
             */
            images?: string[] | null;
        };
        /** Body_vacation_example_parsebot_vacation_example_post */
        Body_vacation_example_parsebot_vacation_example_post: {
            /** @default {
             *       "locations": [
             *         "Yellowstone"
             *       ],
             *       "notes": [
             *         "Yellowstone: We saw one of those blue cool hot spring pools, very cool.",
             *         "Yellowstone: We saw a buffalo! It was huge and looked scary.",
             *         "Yellowstone: We went to see the Old Faithful Geysir, magnificent!",
             *         "Yellowstone: We stayed in yellowstone for three nights."
             *       ],
             *       "companions": [
             *         "Kristian: My brother"
             *       ],
             *       "prices": [
             *         "100 USD: Nightly price for cabin, stayed for three nights",
             *         "20 USD: Park entrance",
             *         "100 USD: Food",
             *         "100 USD: Gas"
             *       ]
             *     } */
            data: components["schemas"]["VacationParseApiProps_list_str__"];
            /** Images */
            images?: string[] | null;
        };
        /**
         * EvaluateBotPrompts
         * @description Model for the EvaluateBot prompts.
         *
         *     Attributes:
         *             summarize_section_prompt (str): Prompt for summarizing a section of the conversation.
         *             establish_situation_prompt (str): Prompt for establishing the situation based on the current transcription.
         *             summarize_section_prompt (str): Prompt for summarizing a section of the conversation.
         *             pairwise_prompt (str): Prompt for pairwise comparison of documents.
         *             extract_advices_prompt (str): Prompt for extracting advices from a chapter.
         *             evaluate_section_prompt (str): Prompt for evaluating the advices given by the dispatcher.
         *             evaluate_section_not_breathing_prompt (str): Prompt for evaluating the advices given by the dispatcher when the patient is not breathing.
         */
        EvaluateBotPrompts: {
            /** Establish Situation Prompt */
            establish_situation_prompt: string;
            /** Summarize Section Prompt */
            summarize_section_prompt: string;
            /** Pairwise Prompt */
            pairwise_prompt: string;
            /** Extract Advices Prompt */
            extract_advices_prompt: string;
            /** Evaluate Section Prompt */
            evaluate_section_prompt: string;
            /** Evaluate Section Not Breathing Prompt */
            evaluate_section_not_breathing_prompt: string;
        };
        /** EvaluateBotState */
        EvaluateBotState: {
            /**
             * Evaluate Idx
             * @default 0
             */
            evaluate_idx: number;
            /**
             * Sections
             * @default []
             */
            sections: components["schemas"]["Section"][];
            /**
             * Situation Established
             * @default false
             */
            situation_established: boolean;
            /**
             * Unconcious Not Breathing
             * @default false
             */
            unconcious_not_breathing: boolean;
            /**
             * Is Child
             * @default false
             */
            is_child: boolean;
        };
        /**
         * Evaluation
         * @description Evaluation model for the EvaluateBot module.
         *     The evaluation is the final result of the evaluation agent.
         *
         *     Attributes:
         *             summary (str): Summary of the evaluation.
         *             evaluation (str): Evaluation result.
         *             alternate_action (str): Alternate action suggested by the LLM.
         *             score (int): Score of the evaluation.
         */
        Evaluation: {
            /** Summary */
            summary: string;
            /** Evaluation */
            evaluation: string;
            /** Alternate Action */
            alternate_action: string;
            /** Score */
            score: number;
        };
        /** ExamplePrompts */
        ExamplePrompts: {
            props: components["schemas"]["GenerateReportProps"];
            summaryBotPromptDescriptions: components["schemas"]["SummaryBotPrompts"];
            evaluateBotPromptDescriptions: components["schemas"]["EvaluateBotPrompts"];
        };
        /**
         * FetchedDocs
         * @description FetchedDocs model for the EvaluateBot module.
         *
         *     Attributes:
         *             content (str): Content of the fetched document.
         *             chapter (str): Chapter of the fetched document.
         */
        FetchedDocs: {
            /** Content */
            content: string;
            /** Chapter */
            chapter: string;
        };
        /** GenerateReportProps */
        GenerateReportProps: {
            baseData: components["schemas"]["BaseData"];
            evaluateBotPrompts: components["schemas"]["EvaluateBotPrompts"];
            summaryBotPrompts: components["schemas"]["SummaryBotPrompts"];
        };
        /** GetReportResponse */
        GetReportResponse: {
            state: components["schemas"]["GraphState"];
            /** Finished */
            finished: boolean;
            /** Id */
            id: string;
            /** Created At */
            created_at?: string | null;
        };
        /** GetReportsResults */
        GetReportsResults: {
            /** Id */
            id: string;
        };
        /** GraphState */
        GraphState: {
            evaluateBotPrompts: components["schemas"]["EvaluateBotPrompts"];
            evaluateBotState: components["schemas"]["EvaluateBotState"];
            summaryBotState: components["schemas"]["SummaryBotState"];
            summaryBotPrompts: components["schemas"]["SummaryBotPrompts"];
            /**
             * Imagedescriptions
             * @default []
             */
            imageDescriptions: components["schemas"]["ImageDescription"][];
            baseDataEvaluateBot: components["schemas"]["BaseData"];
            baseDataSummaryBot: components["schemas"]["BaseData"];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ImageDescription */
        ImageDescription: {
            /** Image */
            image: string;
            /** Description */
            description: string;
        };
        /** ReportGenerateResponse */
        ReportGenerateResponse: {
            /** Id */
            id: string;
        };
        /**
         * Section
         * @description Section model for the EvaluateBot module.
         *     A section represents a part of the conversation in the evaluation process, and is being evaluated.
         *
         *     Attributes:
         *             id (int): Unique identifier for the section, used for tracking.
         *             earlier_transcriptions (list[str]): The entire transcription of the conversation up to (but not including) this point.
         *             transcriptions (list[str]): The transcription of the conversation in this section.
         *             evaluation (Optional[Evaluation]): The evaluation of the section, None until generated. Will always be generated.
         *             summary (Optional[Summary]): The summary of the section, None until generated. Only generated if situation is established.
         *             fetched_docs (list[FetchedDocs]): List of fetched documents related to the section. Will only be populated if RAG is used.
         *             best_doc (str): The chosen document fetched for this section by the pairwise ranking. Will only be filled if situation is established.
         *             advice (Optional[Advice]): The advice for the section, None until generated. Only generated if situation is established.
         */
        Section: {
            /** Id */
            id: number;
            /**
             * Earlier Transcriptions
             * @default []
             */
            earlier_transcriptions: string[];
            /**
             * Transcriptions
             * @default []
             */
            transcriptions: string[];
            evaluation?: components["schemas"]["Evaluation"] | null;
            summary?: components["schemas"]["Summary"] | null;
            /**
             * Fetched Docs
             * @default []
             */
            fetched_docs: components["schemas"]["FetchedDocs"][];
            /**
             * Best Doc
             * @default
             */
            best_doc: string;
            advice?: components["schemas"]["Advice"] | null;
            /** Result */
            result?: string | null;
            /** Resultdetailed */
            resultDetailed?: string | null;
        };
        /**
         * Summary
         * @description Summary model for the EvaluateBot module.
         *     A summary contains information about the situation, usually passed to an LLM for context.
         *
         *     Attributes:
         *             condition (str): The condition of the patient. Whats wrong?
         *             observations (str): Observations reported by the caller.
         *             cause (str): The cause of the condition. What happened?
         *             callers_actions (str): What the caller is doing. What is its role?
         */
        Summary: {
            /** Condition */
            condition: string;
            /** Observations */
            observations: string;
            /** Cause */
            cause: string;
            /** Callers Actions */
            callers_actions: string;
        };
        /** SummaryBotPrompts */
        SummaryBotPrompts: {
            /** Describe Case Prompt */
            describe_case_prompt: string;
            /** Describe Image Prompt */
            describe_image_prompt: string;
            /** Generate Summary Prompt */
            generate_summary_prompt: string;
            /** Intention Prompt */
            intention_prompt: string;
            /** Transcription Prompt */
            transcription_prompt: string;
        };
        /** SummaryBotState */
        SummaryBotState: {
            /**
             * Case Description
             * @default
             */
            case_description: string;
            /**
             * Steps
             * @default []
             */
            steps: string[];
            /** Summarybotresult */
            summaryBotResult?: string | null;
        };
        /** VacationParseApiProps[list[str]] */
        VacationParseApiProps_list_str__: {
            /** Locations */
            locations: string[];
            /** Notes */
            notes: string[];
            /** Companions */
            companions: string[];
            /** Prices */
            prices: string[];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    autodoc_stuff_image_decoder_example_post: {
        parameters: {
            query: {
                message: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_autodoc_stuff_image_decoder_example_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutoDocOut"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_word_document_stuff_generate_word_example_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    vacation_example_parsebot_vacation_example_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_vacation_example_parsebot_vacation_example_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    aicos_example_aicos_aicos_example_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_aicos_example_aicos_aicos_example_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    report_generate_report_report_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenerateReportProps"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportGenerateResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_reports_report_get_reports_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReportsResults"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_report_report_get_report__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReportResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_example_prompts_report_get_example_prompts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExamplePrompts"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
